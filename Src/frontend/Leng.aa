#include <iostream>
#include <vector>
#include <iomanip>
#include <string>
#include <map>
#include <cstdlib>
#include <ctime>
#include <limits>

class Player {
public:
    char name;
    int points;
    int position;

    Player(char nameChar) : name(nameChar), points(100), position(0) {}
};

class Tile {
public:
    std::string effect;
    int pointChange;
    std::vector<char> playersOnTile;

    Tile(const std::string& e = "normal", int change = 0)
        : effect(e), pointChange(change) {}
};

class GameBoard {
    std::vector<Tile> tiles;

public:
    GameBoard() {

        std::vector<std::pair<std::string, int>> effects = {
            {"normal", 0}, {"playgame -25", -25}, {"normal", 0}, {"grant +20", 20},
            {"sleep in class -10", -10}, {"normal", 0}, {"quiz +30", 30},
            {"lose notebook -15", -15}, {"normal", 0}, {"bonus project +25", 25}
        };
        for (int i = 0; i < 50; ++i) {
            tiles.push_back(Tile(effects[i % effects.size()].first, effects[i % effects.size()].second));
        }
    }

    void updatePlayersOnTiles(std::vector<Player>& players) {
        for (auto& tile : tiles) {
            tile.playersOnTile.clear();
        }
        for (const auto& player : players) {
            if (player.position < (int)tiles.size()) {
                tiles[player.position].playersOnTile.push_back(player.name);
            }
        }
    }

    void displayBoard() const {
        const int width = 20;
        const int rows = 10;
        const int cols = 5;


        for (int row = 0; row < rows; ++row) {
            // ‡πÄ‡∏™‡πâ‡∏ô‡∏Ç‡∏≠‡∏ö‡∏ö‡∏ô
            for (int col = 0; col < cols; ++col)
                std::cout << "+" << std::string(width, '-');
            std::cout << "+\n";

            // ‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏ä‡πà‡∏≠‡∏á
            for (int col = 0; col < cols; ++col) {
                int index = row * cols + col;
                std::string label = "Tile " + std::to_string(index + 1);
                std::cout << "|" << std::setw(width) << std::left << label;
            }
            std::cout << "|\n";

            // ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Å‡∏£‡∏∞‡∏ó‡∏ö
            for (int col = 0; col < cols; ++col) {
                int index = row * cols + col;
                std::cout << "|" << std::setw(width) << std::left << tiles[index].effect;
            }
            std::cout << "|\n";

            // ‡πÅ‡∏™‡∏î‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
            for (int col = 0; col < cols; ++col) {
                int index = row * cols + col;
                std::string pStr = "Player: ";
                if (!tiles[index].playersOnTile.empty()) {
                    for (char c : tiles[index].playersOnTile)
                        pStr += c;
                }
                std::cout << "|" << std::setw(width) << std::left << pStr;
            }
            std::cout << "|\n";
        }

        // ‡πÄ‡∏™‡πâ‡∏ô‡∏•‡πà‡∏≤‡∏á‡∏™‡∏∏‡∏î
        for (int col = 0; col < cols; ++col)
            std::cout << "+" << std::string(width, '-');
        std::cout << "+\n";
    }

    int getSize() const {
        return tiles.size();
    }

    int applyTileEffect(Player& player) {
        if (player.position >= (int)tiles.size()) return 0;
        player.points += tiles[player.position].pointChange;
        return tiles[player.position].pointChange;
    }
};

void printPlayerScores(const std::vector<Player>& players) {
    std::cout << "\nPlayer Scores:\n";
    for (const auto& player : players) {
        std::cout << player.name << " : " << player.points << " points\n";
    }
}

int main() {
    int numPlayers;
    std::cout << "Enter number of players (2-4): ";
    std::cin >> numPlayers;

    if (numPlayers < 2 || numPlayers > 4) {
        std::cout << "Invalid number of players. Please enter between 2 and 4.\n";
        return 1;
    }

    std::vector<Player> players;
    for (int i = 0; i < numPlayers; ++i) {
        players.emplace_back('A' + i);
    }

    GameBoard board;

    std::srand(static_cast<unsigned int>(std::time(nullptr)));

    // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏ó‡∏¥‡∏£‡πå‡∏ô‡πÅ‡∏£‡∏Å
    std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');
    std::cout << "\nüé≤ Dice: Press Enter to roll the dice...\n";
    std::cin.get();

    int diceRoll = std::rand() % 6 + 1;
    std::cout << "üé≤ Dice rolled: " << diceRoll << "\n";

    // ‡πÄ‡∏î‡∏¥‡∏ô‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô A
    players[0].position += diceRoll;
    if (players[0].position >= board.getSize()) {
        players[0].position = board.getSize() - 1;
    }

    board.applyTileEffect(players[0]);
    board.updatePlayersOnTiles(players);
    printPlayerScores(players);
    board.displayBoard();

    return 0;
}
